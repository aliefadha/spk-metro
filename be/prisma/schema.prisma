generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                  String                @id @default(uuid())
  userId              String                @unique
  email               String                @unique
  password            String
  fullName            String
  role                Role
  divisionId          String?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  assesmentNonDev     assesmentNonDev[]
  projectCollaborator projectCollaborator[]
  token               token[]
  division            division?             @relation(fields: [divisionId], references: [id])

  @@index([divisionId], map: "user_divisionId_fkey")
}

model token {
  id         String   @id @default(uuid())
  token      String   @db.Text
  userId     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "token_userId_fkey")
}

model projectCollaborator {
  projectId        String
  userId           String
  isProjectManager Boolean
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  project          project  @relation(fields: [projectId], references: [id])
  user             user     @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@index([userId], map: "projectCollaborator_userId_fkey")
}

model project {
  id                  String                @id @default(uuid())
  projectName         String
  bobot               Float
  deadline            String
  tanggal_selesai     String?
  status              StatusProject
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  asessment           assesment[]
  projectCollaborator projectCollaborator[]
}

model metric {
  id              String            @id @default(uuid())
  kodeKpi         String            @unique
  kpiName         String
  target          Float
  bobot           Float
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  char            Karakteristik
  divisionId      String
  asessment       assesment[]
  assesmentNonDev assesmentNonDev[]
}

model assesment {
  id                  String                @id @default(uuid())
  projectId           String
  metricId            String
  userId              String
  value               Int
  assesmentDate       String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  metric              metric                @relation(fields: [metricId], references: [id])
  project             project               @relation(fields: [projectId], references: [id])
  assesmentResult     assesmentResult[]
  metricNormalization metricNormalization[]
  metricResult        metricResult[]

  @@index([metricId], map: "assesment_metricId_fkey")
  @@index([projectId], map: "assesment_projectId_fkey")
}

model assesmentNonDev {
  id                  String                @id @default(uuid())
  metricId            String
  userId              String
  value               Int
  assesmentDate       String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  metric              metric                @relation(fields: [metricId], references: [id])
  user                user                  @relation(fields: [userId], references: [id])
  assesmentResult     assesmentResult[]
  metricNormalization metricNormalization[]
  metricResult        metricResult[]

  @@index([metricId], map: "assesmentNonDev_metricId_fkey")
  @@index([userId], map: "assesmentNonDev_userId_fkey")
}

model metricResult {
  id                String           @id @default(uuid())
  totalUtility      Float
  vikorIndex        Float
  maximumDeviation  Float
  assesmentId       String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  assesmentNonDevId String?
  assesment         assesment?       @relation(fields: [assesmentId], references: [id])
  assesmentNonDev   assesmentNonDev? @relation(fields: [assesmentNonDevId], references: [id])

  @@index([assesmentId], map: "metricResult_assesmentId_fkey")
  @@index([assesmentNonDevId], map: "metricResult_assesmentNonDevId_fkey")
}

model metricNormalization {
  id                String           @id @default(uuid())
  value             Float
  assesmentId       String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  assesmentNonDevId String?
  assesment         assesment?       @relation(fields: [assesmentId], references: [id])
  assesmentNonDev   assesmentNonDev? @relation(fields: [assesmentNonDevId], references: [id])

  @@index([assesmentId], map: "metricNormalization_assesmentId_fkey")
  @@index([assesmentNonDevId], map: "metricNormalization_assesmentNonDevId_fkey")
}

model assesmentResult {
  id                String           @id @default(uuid())
  skor              Float
  status            StatusAssesment
  isPersonal        Boolean
  assesmentId       String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  assesmentNonDevId String?
  assesment         assesment?       @relation(fields: [assesmentId], references: [id])
  assesmentNonDev   assesmentNonDev? @relation(fields: [assesmentNonDevId], references: [id])

  @@index([assesmentId], map: "assesmentResult_assesmentId_fkey")
  @@index([assesmentNonDevId], map: "assesmentResult_assesmentNonDevId_fkey")
}

model division {
  id           String   @id @default(uuid())
  divisionName String   @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         user[]
}

enum StatusAssesment {
  ACHIEVED
  NOTACHIEVED
}

enum StatusProject {
  DONE
  ONPROGRESS
  BACKLOG
}

enum Role {
  SUPERADMIN
  MEMBER
  PM
}

enum Karakteristik {
  Cost
  Benefit
}
